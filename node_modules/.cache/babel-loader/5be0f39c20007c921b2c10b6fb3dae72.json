{"ast":null,"code":"import { useMemo } from \"react\";\nimport { TooltipPlacement } from \"../library/types\";\nvar tooltipPadding = 5;\nexport var useTooltipTransform = function useTooltipTransform(wrapper, tooltip, placement) {\n  var calculateTransformStyle = function calculateTransformStyle() {\n    if (!wrapper || !tooltip) {\n      return {};\n    }\n    var wrapperBoundingRect = wrapper.getBoundingClientRect();\n    var wrapperWidth = wrapperBoundingRect.right - wrapperBoundingRect.left;\n    var wrapperHeight = wrapperBoundingRect.bottom - wrapperBoundingRect.top;\n    var tooltipBoundingRect = tooltip.getBoundingClientRect();\n    var tooltipWidth = tooltipBoundingRect.right - tooltipBoundingRect.left;\n    var tooltipHeight = tooltipBoundingRect.bottom - tooltipBoundingRect.top;\n    var left = wrapperBoundingRect.left + wrapperWidth / 2 - tooltipWidth / 2;\n    var top = wrapperBoundingRect.top + wrapperHeight / 2 - tooltipHeight / 2;\n    switch (placement) {\n      case TooltipPlacement.Top:\n        top = wrapperBoundingRect.top - tooltipHeight - tooltipPadding;\n        break;\n      case TooltipPlacement.Bottom:\n        top = wrapperBoundingRect.bottom + tooltipPadding;\n        break;\n      case TooltipPlacement.Left:\n        left = wrapperBoundingRect.left - tooltipWidth - tooltipPadding;\n        break;\n      case TooltipPlacement.Right:\n        left = wrapperBoundingRect.right + tooltipPadding;\n        break;\n    }\n    return {\n      transform: \"translate3d(\".concat(left, \"px, \").concat(top, \"px, 0px)\")\n    };\n  };\n  return useMemo(function () {\n    return calculateTransformStyle();\n  }, [wrapper, tooltip]);\n};","map":null,"metadata":{},"sourceType":"module"}