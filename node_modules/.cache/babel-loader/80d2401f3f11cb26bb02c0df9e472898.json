{"ast":null,"code":"import React, { Children, cloneElement, isValidElement, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { getTooltipElementProps } from \"./functions/tooltip-element-props\";\nimport { useTooltipTransform } from \"./functions/tooltip-transform-hook\";\nimport { TooltipPlacement } from \"./library/types\";\nimport { StyledTooltip } from \"./StyledTooltip\";\nexport var Tooltip = function Tooltip(_a) {\n  var title = _a.title,\n    _b = _a.placement,\n    placement = _b === void 0 ? TooltipPlacement.Top : _b,\n    children = _a.children;\n  var _c = useState(false),\n    isOpen = _c[0],\n    setIsOpen = _c[1];\n  var _d = useState(null),\n    tooltip = _d[0],\n    setTooltip = _d[1];\n  var wrapperRef = useRef(null);\n  var tooltipStyles = useTooltipTransform(wrapperRef.current, tooltip, placement);\n  var openTooltip = function openTooltip() {\n    return !isOpen && setIsOpen(true);\n  };\n  var closeTooltip = function closeTooltip() {\n    return isOpen && setIsOpen(false);\n  };\n  if (!title || !isValidElement(children)) {\n    return React.createElement(React.Fragment, null, children);\n  }\n  return React.createElement(\"div\", {\n    ref: wrapperRef\n  }, React.createElement(React.Fragment, null, cloneElement(Children.only(children), getTooltipElementProps(children.props, openTooltip, closeTooltip)), isOpen && createPortal(React.createElement(StyledTooltip, {\n    style: tooltipStyles,\n    ref: function ref(element) {\n      return element && setTooltip(element);\n    },\n    role: \"tooltip\"\n  }, title), document.getElementsByTagName(\"body\")[0])));\n};","map":null,"metadata":{},"sourceType":"module"}