{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { Children, cloneElement, useState } from \"react\";\nimport { Backdrop } from \"../Backdrop/Backdrop\";\nimport { CircleMenuItem } from \"../CircleMenuItem/CircleMenuItem\";\nimport { CircleMenuToggle } from \"../CircleMenuToggle/CircleMenuToggle\";\nimport { StyledCircleMenuData } from \"./StyledCircleMenu\";\nexport var CircleMenu = function CircleMenu(_a) {\n  var _b = _a.rotationAngleInclusive,\n    rotationAngleInclusive = _b === void 0 ? true : _b,\n    _c = _a.radius,\n    radius = _c === void 0 ? 2 : _c,\n    _d = _a.itemSize,\n    itemSize = _d === void 0 ? 2 : _d,\n    className = _a.className,\n    menuToggleElement = _a.menuToggleElement,\n    menuToggleClassName = _a.menuToggleClassName,\n    onMenuToggle = _a.onMenuToggle,\n    props = __rest(_a, [\"rotationAngleInclusive\", \"radius\", \"itemSize\", \"className\", \"menuToggleElement\", \"menuToggleClassName\", \"onMenuToggle\"]);\n  var _e = useState(false),\n    menuActive = _e[0],\n    setMenuActive = _e[1];\n  var childrenCount = Children.count(props.children);\n  var itemCount = rotationAngleInclusive ? childrenCount - 1 : childrenCount;\n  var toggleMenu = function toggleMenu() {\n    var updatedMenuState = !menuActive;\n    setMenuActive(updatedMenuState);\n    onMenuToggle === null || onMenuToggle === void 0 ? void 0 : onMenuToggle(updatedMenuState);\n  };\n  var menuToggle = menuToggleElement ? cloneElement(menuToggleElement, {\n    onClick: function onClick() {\n      var _a, _b;\n      (_b = (_a = menuToggleElement.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a);\n      toggleMenu();\n    }\n  }) : React.createElement(CircleMenuToggle, {\n    className: menuToggleClassName,\n    menuActive: menuActive,\n    size: itemSize,\n    toggleMenu: toggleMenu\n  });\n  return React.createElement(Backdrop, {\n    className: className,\n    active: menuActive,\n    onClick: toggleMenu\n  }, menuToggle, React.createElement(StyledCircleMenuData, null, Children.map(props.children, function (child, index) {\n    // Calculating angle\n    var angle = props.startAngle;\n    var increment = 0;\n    if (childrenCount > 1) {\n      increment = Math.round(props.rotationAngle / itemCount);\n    }\n    angle += index * increment;\n    return React.createElement(CircleMenuItem, __assign({\n      key: \"cm-item-\" + index\n    }, child.props, {\n      size: itemSize,\n      menuActive: menuActive,\n      radius: radius,\n      rotationAngle: angle\n    }));\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}